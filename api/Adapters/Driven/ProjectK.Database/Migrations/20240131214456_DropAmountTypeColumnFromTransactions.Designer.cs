// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectK.Database.Contexts;

#nullable disable

namespace ProjectK.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240131214456_DropAmountTypeColumnFromTransactions")]
    partial class DropAmountTypeColumnFromTransactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectK.Core.Entities.Category", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("#D1D5DB")
                        .HasColumnName("hex_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ProjectK.Core.Entities.CustomPlannedTransaction", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<byte[]>("BasePlannedTransactionId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("RefersTo")
                        .HasColumnType("date")
                        .HasColumnName("refers_to");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("BasePlannedTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("custom_planned_transactions", (string)null);
                });

            modelBuilder.Entity("ProjectK.Core.Entities.PlannedTransaction", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<int>("AmountType")
                        .HasColumnType("integer")
                        .HasColumnName("amount_type");

                    b.Property<byte[]>("CategoryId")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndsAt")
                        .HasColumnType("date")
                        .HasColumnName("ends_at");

                    b.Property<int>("Recurrence")
                        .HasColumnType("integer")
                        .HasColumnName("recurrence");

                    b.Property<DateOnly>("StartsAt")
                        .HasColumnType("date")
                        .HasColumnName("starts_at");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("planned_transactions", (string)null);
                });

            modelBuilder.Entity("ProjectK.Core.Entities.Transaction", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<byte[]>("CategoryId")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("PaidAt")
                        .HasColumnType("date")
                        .HasColumnName("paid_at");

                    b.Property<byte[]>("PlannedTransactionId")
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("RefersTo")
                        .HasColumnType("date")
                        .HasColumnName("refers_to");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlannedTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("ProjectK.Core.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ProjectK.Core.Entities.Category", b =>
                {
                    b.HasOne("ProjectK.Core.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.CustomPlannedTransaction", b =>
                {
                    b.HasOne("ProjectK.Core.Entities.PlannedTransaction", "BasePlannedTransaction")
                        .WithMany("CustomPlannedTransactions")
                        .HasForeignKey("BasePlannedTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectK.Core.Entities.User", "User")
                        .WithMany("CustomPlannedTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasePlannedTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.PlannedTransaction", b =>
                {
                    b.HasOne("ProjectK.Core.Entities.Category", "Category")
                        .WithMany("PlannedTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectK.Core.Entities.User", "User")
                        .WithMany("PlannedTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.Transaction", b =>
                {
                    b.HasOne("ProjectK.Core.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectK.Core.Entities.PlannedTransaction", "PlannedTransaction")
                        .WithMany("Transactions")
                        .HasForeignKey("PlannedTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectK.Core.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PlannedTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.Category", b =>
                {
                    b.Navigation("PlannedTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.PlannedTransaction", b =>
                {
                    b.Navigation("CustomPlannedTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ProjectK.Core.Entities.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CustomPlannedTransactions");

                    b.Navigation("PlannedTransactions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
